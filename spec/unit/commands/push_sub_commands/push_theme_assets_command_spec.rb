# encoding: utf-8

require 'spec_helper'

require 'locomotive/steam'
require 'locomotive/wagon/commands/push_sub_commands/push_base_command'
require 'locomotive/wagon/commands/push_sub_commands/push_theme_assets_command'

describe Locomotive::Wagon::PushThemeAssetsCommand do

  let(:command) { described_class.new(nil, nil, nil, nil) }

  describe '#compress_and_minify' do

    before { allow(command).to receive(:path).and_return(default_site_path) }

    let(:short_relative_url) { 'stylesheets/application.css' }
    let(:source) { File.join('public', short_relative_url) }
    let(:entity) { Locomotive::Steam::ThemeAsset.new(source: source, short_relative_url: short_relative_url) }
    
    subject { command.send(:compress_and_minify, entity) }

    it 'calls Sprockets to compress and minify the asset' do
      expect(command).to receive(:sprockets_env).and_return({ 'stylesheets/application.css' => 'body{}' })
      is_expected.to eq 'body{}'
    end

    context 'processing bundle.css (generated by Webpack)' do
      let(:short_relative_url) { 'stylesheets/bundle.css' }
      it "doesn't compress or minify it" do
        expect(File).to receive(:read).with(File.join(default_site_path, 'public/stylesheets/bundle.css')).and_return('body{}')
        expect(command).not_to receive(:sprockets_env)
        is_expected.to eq 'body{}'
      end
    end

    context 'processing bundle.js (generated by Webpack)' do
      let(:short_relative_url) { 'javascripts/bundle.js' }
      it "doesn't compress or minify it" do
        expect(command).not_to receive(:sprockets_env)
        expect(File).to receive(:read).with(File.join(default_site_path, 'public/javascripts/bundle.js')).and_return('42')
        is_expected.to eq '42'
      end
    end
  end

  describe '#replace_assets' do

    let(:content) { "body{background-image:url(/images/body.png)}" }
    let(:urls)    { { 'images/body.png' => 'http://cdn/images/body.png?42' } }

    before { command.instance_variable_set(:@remote_urls, urls) }

    subject { command.send(:replace_assets, content) }

    it { is_expected.to eq "body{background-image:url(http://cdn/images/body.png?42)}" }

    context 'font' do

      let(:content) { "@font-face{src: url(\"/fonts/external/myfont.woff?first\");}" }
      let(:urls)  { { 'fonts/external/myfont.woff' => 'http://cdn/fonts/external/myfont.woff?42' } }

      it { is_expected.to eq "@font-face{src: url(\"http://cdn/fonts/external/myfont.woff?42\");}" }

    end

    context 'no correct reference to an image' do

      let(:content) { "body{background-image:url(/somewhere/body.png)}" }

      it { is_expected.to eq "body{background-image:url(/somewhere/body.png)}" }

    end

  end

end
